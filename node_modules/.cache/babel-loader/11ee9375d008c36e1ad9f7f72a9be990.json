{"ast":null,"code":"import _classCallCheck from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/src/components/Streams/StreamForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nvar StreamForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamForm, _React$Component);\n\n  function StreamForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreamForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreamForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderError = function (_ref) {\n      var touched = _ref.touched,\n          error = _ref.error;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        }, error));\n      }\n    };\n\n    _this.renderInput = function (formProps) {\n      var className = \"field \".concat(formProps.meta.error && formProps.meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, formProps.label), React.createElement(\"input\", {\n        onChange: formProps.input.onChange,\n        value: formProps.input.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }), _this.renderError(formProps.meta));\n    };\n\n    _this.onSubmit = function (formValues) {\n      // e.preventDefault();              //No longer needed\n      // formValues can be now directly used for validation, saving to any APIs, etc.\n      // Thus its better method and avoid useless handling of 'event'. \n      // console.log(formValues);\n      _this.props.onSubmit(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(StreamForm, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"Title\",\n        component: this.renderInput,\n        label: \"Enter Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"Description\",\n        component: this.renderInput,\n        label: \"Enter Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return StreamForm;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.Title) {\n    errors.Title = \"Form must have a Title\";\n  }\n\n  if (!formValues.Description) {\n    errors.Description = \"Form must have a Description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamForm',\n  validate: validate\n})(StreamForm);","map":{"version":3,"sources":["/home/aakash/Documents/Aakash/Learn/React-js/streams/client/src/components/Streams/StreamForm.js"],"names":["React","Field","reduxForm","StreamForm","renderError","touched","error","renderInput","formProps","className","meta","label","input","onChange","value","onSubmit","formValues","props","handleSubmit","Component","validate","errors","Title","Description","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,SAAf,QAA+B,YAA/B;;IAIMC,U;;;;;;;;;;;;;;;;;;UAEFC,W,GAAc,gBAAsB;AAAA,UAApBC,OAAoB,QAApBA,OAAoB;AAAA,UAAXC,KAAW,QAAXA,KAAW;;AAChC,UAAID,OAAO,IAAIC,KAAf,EAAqB;AACjB,eACI;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKA,KADL,CADJ,CADJ;AAOH;AACJ,K;;UAGDC,W,GAAc,UAACC,SAAD,EAAe;AACzB,UAAMC,SAAS,mBAAYD,SAAS,CAACE,IAAV,CAAeJ,KAAf,IAAwBE,SAAS,CAACE,IAAV,CAAeL,OAAvC,GAAiD,OAAjD,GAA0D,EAAtE,CAAf;AACA,aACI;AAAK,QAAA,SAAS,EAAEI,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQD,SAAS,CAACG,KAAlB,CADA,EAEI;AAAO,QAAA,QAAQ,EAAEH,SAAS,CAACI,KAAV,CAAgBC,QAAjC;AAA2C,QAAA,KAAK,EAAEL,SAAS,CAACI,KAAV,CAAgBE,KAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGK,MAAKV,WAAL,CAAiBI,SAAS,CAACE,IAA3B,CAHL,CADJ;AAQH,K;;UAEDK,Q,GAAW,UAACC,UAAD,EAAgB;AACvB;AAEA;AACA;AAEA;AAEA,YAAKC,KAAL,CAAWF,QAAX,CAAoBC,UAApB;AAGH,K;;;;;;;6BAEQ;AACL,aACI;AAAM,QAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKH,QAA7B,CAAhB;AAAwD,QAAA,SAAS,EAAC,eAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SASI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKR,WAApC;AAAiD,QAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATJ,EAUI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,QAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVJ,EAYI;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAZJ,CADJ;AAgBH;;;;EAzDoBP,KAAK,CAACmB,S;;AA6D/B,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACJ,UAAD,EAAgB;AAC7B,MAAMK,MAAM,GAAG,EAAf;;AAEA,MAAG,CAACL,UAAU,CAACM,KAAf,EAAsB;AAClBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACH;;AAED,MAAG,CAACN,UAAU,CAACO,WAAf,EAA4B;AACxBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACH;;AAED,SAAOF,MAAP;AACH,CAZD;;AAeA,eAAenB,SAAS,CAAC;AAACsB,EAAAA,IAAI,EAAG,YAAR;AAAsBJ,EAAAA,QAAQ,EAARA;AAAtB,CAAD,CAAT,CAA2CjB,UAA3C,CAAf","sourcesContent":["import React from 'react';\nimport {Field, reduxForm} from 'redux-form';\n\n\n\nclass StreamForm extends React.Component {\n\n    renderError = ({touched, error}) => {\n        if (touched && error){\n            return(\n                <div className=\"ui error message\">\n                    <div className=\"header\">\n                        {error}\n                    </div>\n                </div>\n            );\n        }\n    }\n\n\n    renderInput = (formProps) => {\n        const className = `field ${formProps.meta.error && formProps.meta.touched ? 'error': ''}`;\n        return(\n            <div className={className}>\n            <label>{formProps.label}</label>\n                <input onChange={formProps.input.onChange} value={formProps.input.value} />\n                {this.renderError(formProps.meta)}\n                {/* <div>{formProps.meta.error}</div> */}\n            </div>\n        );\n    }\n\n    onSubmit = (formValues) => {\n        // e.preventDefault();              //No longer needed\n\n        // formValues can be now directly used for validation, saving to any APIs, etc.\n        // Thus its better method and avoid useless handling of 'event'. \n\n        // console.log(formValues);\n\n        this.props.onSubmit(formValues);\n\n\n    }\n\n    render() {\n        return(\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n\n            {/* 'handleSubmit' is a callback method provided to component by the Redux-form. We then pass our callback method (onSubmit) to this function.\n            Behind the scenes 'handleSubmit' automatically gets access to 'event' and automatically call 'e.preventDefault()'. Thus there is no need to \n            even call onSubmit function with event (i.e. onSubmit(e)) instead its going to be called with the values which we have inside our 'Field' inputs. */}\n\n            {/* Field (by default) in case of extra input like 'label' automatically pass it as a prop to renderInput function.\n                This makes label access by 'formProps'. */}\n\n                <Field name='Title' component={this.renderInput} label=\"Enter Title\"/>\n                <Field name='Description' component={this.renderInput} label=\"Enter Description\"/>\n\n                <button className=\"ui button primary\">Submit</button>\n            </form>\n        );\n    }\n}\n\n\nconst validate = (formValues) => {\n    const errors = {};\n\n    if(!formValues.Title) {\n        errors.Title = \"Form must have a Title\";\n    }\n\n    if(!formValues.Description) {\n        errors.Description = \"Form must have a Description\";\n    }\n\n    return errors;\n};\n\n\nexport default reduxForm({form : 'streamForm', validate})(StreamForm);\n\n"]},"metadata":{},"sourceType":"module"}