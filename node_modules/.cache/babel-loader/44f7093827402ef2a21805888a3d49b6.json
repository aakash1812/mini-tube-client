{"ast":null,"code":"// import React from 'react';\n// import {Field, reduxForm} from 'redux-form';\n// import { connect } from 'react-redux';\n// import { createStreams } from '../../actions';\n// class StreamCreate extends React.Component {\n//     renderError = ({touched, error}) => {\n//         if (touched && error){\n//             return(\n//                 <div className=\"ui error message\">\n//                     <div className=\"header\">\n//                         {error}\n//                     </div>\n//                 </div>\n//             );\n//         }\n//     }\n//     renderInput = (formProps) => {\n//         const className = `field ${formProps.meta.error && formProps.meta.touched ? 'error': ''}`;\n//         return(\n//             <div className={className}>\n//             <label>{formProps.label}</label>\n//                 <input onChange={formProps.input.onChange} value={formProps.input.value} />\n//                 {this.renderError(formProps.meta)}\n//                 {/* <div>{formProps.meta.error}</div> */}\n//             </div>\n//         );\n//     }\n//     onSubmit = (formValues) => {\n//         // e.preventDefault();              //No longer needed\n//         // formValues can be now directly used for validation, saving to any APIs, etc.\n//         // Thus its better method and avoid useless handling of 'event'. \n//         // console.log(formValues);\n//         this.props.createStreams(formValues);\n//     }\n//     render() {\n//         return(\n//             <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n//             {/* 'handleSubmit' is a callback method provided to component by the Redux-form. We then pass our callback method (onSubmit) to this function.\n//             Behind the scenes 'handleSubmit' automatically gets access to 'event' and automatically call 'e.preventDefault()'. Thus there is no need to \n//             even call onSubmit function with event (i.e. onSubmit(e)) instead its going to be called with the values which we have inside our 'Field' inputs. */}\n//             {/* Field (by default) in case of extra input like 'label' automatically pass it as a prop to renderInput function.\n//                 This makes label access by 'formProps'. */}\n//                 <Field name='Title' component={this.renderInput} label=\"Enter Title\"/>\n//                 <Field name='Description' component={this.renderInput} label=\"Enter Description\"/>\n//                 <button className=\"ui button primary\">Submit</button>\n//             </form>\n//         );\n//     }\n// }\n// const validate = (formValues) => {\n//     const errors = {};\n//     if(!formValues.Title) {\n//         errors.Title = \"Form must have a Title\";\n//     }\n//     if(!formValues.Description) {\n//         errors.Description = \"Form must have a Description\";\n//     }\n//     return errors;\n// };\n// const formWrapped = reduxForm({form : 'streamCreate', validate})(StreamCreate);\n// export default connect(null, { createStreams })(formWrapped);\n//#######################################################################################################################################################","map":{"version":3,"sources":["/home/aakash/Documents/Aakash/Learn/React-js/streams/client/src/components/Streams/StreamCreate.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AAEA","sourcesContent":["// import React from 'react';\n// import {Field, reduxForm} from 'redux-form';\n// import { connect } from 'react-redux';\n// import { createStreams } from '../../actions';\n\n\n// class StreamCreate extends React.Component {\n\n//     renderError = ({touched, error}) => {\n//         if (touched && error){\n//             return(\n//                 <div className=\"ui error message\">\n//                     <div className=\"header\">\n//                         {error}\n//                     </div>\n//                 </div>\n//             );\n//         }\n//     }\n\n\n//     renderInput = (formProps) => {\n//         const className = `field ${formProps.meta.error && formProps.meta.touched ? 'error': ''}`;\n//         return(\n//             <div className={className}>\n//             <label>{formProps.label}</label>\n//                 <input onChange={formProps.input.onChange} value={formProps.input.value} />\n//                 {this.renderError(formProps.meta)}\n//                 {/* <div>{formProps.meta.error}</div> */}\n//             </div>\n//         );\n//     }\n\n//     onSubmit = (formValues) => {\n//         // e.preventDefault();              //No longer needed\n\n//         // formValues can be now directly used for validation, saving to any APIs, etc.\n//         // Thus its better method and avoid useless handling of 'event'. \n\n//         // console.log(formValues);\n\n//         this.props.createStreams(formValues);\n\n\n//     }\n\n//     render() {\n//         return(\n//             <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n\n//             {/* 'handleSubmit' is a callback method provided to component by the Redux-form. We then pass our callback method (onSubmit) to this function.\n//             Behind the scenes 'handleSubmit' automatically gets access to 'event' and automatically call 'e.preventDefault()'. Thus there is no need to \n//             even call onSubmit function with event (i.e. onSubmit(e)) instead its going to be called with the values which we have inside our 'Field' inputs. */}\n\n//             {/* Field (by default) in case of extra input like 'label' automatically pass it as a prop to renderInput function.\n//                 This makes label access by 'formProps'. */}\n\n//                 <Field name='Title' component={this.renderInput} label=\"Enter Title\"/>\n//                 <Field name='Description' component={this.renderInput} label=\"Enter Description\"/>\n\n//                 <button className=\"ui button primary\">Submit</button>\n//             </form>\n//         );\n//     }\n// }\n\n\n// const validate = (formValues) => {\n//     const errors = {};\n\n//     if(!formValues.Title) {\n//         errors.Title = \"Form must have a Title\";\n//     }\n\n//     if(!formValues.Description) {\n//         errors.Description = \"Form must have a Description\";\n//     }\n\n//     return errors;\n// };\n\n\n// const formWrapped = reduxForm({form : 'streamCreate', validate})(StreamCreate);\n\n// export default connect(null, { createStreams })(formWrapped);\n\n//#######################################################################################################################################################\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}