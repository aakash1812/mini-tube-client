{"ast":null,"code":"import _classCallCheck from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/src/components/Streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nvar StreamCreate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamCreate, _React$Component);\n\n  function StreamCreate() {\n    _classCallCheck(this, StreamCreate);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StreamCreate).apply(this, arguments));\n  }\n\n  _createClass(StreamCreate, [{\n    key: \"renderInput\",\n    value: function renderInput(formProps) {\n      return React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, formProps.label), React.createElement(\"input\", {\n        onChange: formProps.input.onChange,\n        value: formProps.input.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(formValues) {\n      // e.preventDefault();              //No longer needed\n      // formValues can be now directly used for validation, saving to any APIs, etc.\n      // Thus its better method and avoid useless handling of 'event'. \n      console.log(formValues);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"Title\",\n        component: this.renderInput,\n        label: \"Enter Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"Description\",\n        component: this.renderInput,\n        label: \"Enter Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return StreamCreate;\n}(React.Component);\n\nexport default reduxForm({\n  form: 'streamCreate'\n})(StreamCreate);","map":{"version":3,"sources":["/home/aakash/Documents/Aakash/Learn/React-js/streams/client/src/components/Streams/StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","formProps","label","input","onChange","value","formValues","console","log","props","handleSubmit","onSubmit","renderInput","Component","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,SAAf,QAA+B,YAA/B;;IAEMC,Y;;;;;;;;;;;;;gCAEWC,S,EAAW;AACpB,aACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQA,SAAS,CAACC,KAAlB,CADA,EAEI;AAAO,QAAA,QAAQ,EAAED,SAAS,CAACE,KAAV,CAAgBC,QAAjC;AAA2C,QAAA,KAAK,EAAEH,SAAS,CAACE,KAAV,CAAgBE,KAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ;AAMH;;;6BAEQC,U,EAAY;AACjB;AAEA;AACA;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AAGH;;;6BAEQ;AACL,aACI;AAAM,QAAA,QAAQ,EAAE,KAAKG,KAAL,CAAWC,YAAX,CAAwB,KAAKC,QAA7B,CAAhB;AAAwD,QAAA,SAAS,EAAC,SAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SASI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKC,WAApC;AAAiD,QAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATJ,EAUI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,QAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVJ,EAYI;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAZJ,CADJ;AAgBH;;;;EAvCsBf,KAAK,CAACgB,S;;AA0CjC,eAAed,SAAS,CAAC;AAACe,EAAAA,IAAI,EAAG;AAAR,CAAD,CAAT,CAAmCd,YAAnC,CAAf","sourcesContent":["import React from 'react';\nimport {Field, reduxForm} from 'redux-form';\n\nclass StreamCreate extends React.Component {\n\n    renderInput (formProps) {\n        return(\n            <div className='field'>\n            <label>{formProps.label}</label>\n                <input onChange={formProps.input.onChange} value={formProps.input.value} />\n            </div>\n        );\n    }\n\n    onSubmit(formValues) {\n        // e.preventDefault();              //No longer needed\n\n        // formValues can be now directly used for validation, saving to any APIs, etc.\n        // Thus its better method and avoid useless handling of 'event'. \n\n        console.log(formValues);\n\n\n    }\n\n    render() {\n        return(\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form\">\n\n            {/* 'handleSubmit' is a callback method provided to component by the Redux-form. We then pass our callback method (onSubmit) to this function.\n            Behind the scenes 'handleSubmit' automatically gets access to 'event' and automatically call 'e.preventDefault()'. Thus there is no need to \n            even call onSubmit function with event (i.e. onSubmit(e)) instead its going to be called with the values which we have inside our 'Field' inputs. */}\n\n            {/* Field (by default) in case of extra input like 'label' automatically pass it as a prop to renderInput function.\n                This makes label access by 'formProps'. */}\n\n                <Field name='Title' component={this.renderInput} label=\"Enter Title\"/>\n                <Field name='Description' component={this.renderInput} label=\"Enter Description\"/>\n\n                <button className=\"ui button primary\">Submit</button>\n            </form>\n        );\n    }\n}\n\nexport default reduxForm({form : 'streamCreate'})(StreamCreate);"]},"metadata":{},"sourceType":"module"}