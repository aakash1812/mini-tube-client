{"ast":null,"code":"import _regeneratorRuntime from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport streams from '../apis/streams';\nimport history from '../history';\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAM, FETCH_STREAMS, DELETE_STREAM, EDIT_STREAM } from './types';\nexport var signIn = function signIn(userId) {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport var signOut = function signOut() {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport var createStreams = function createStreams(formValues) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var userId, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                userId = getState().auth.userId;\n                _context.next = 3;\n                return streams.post('/streams', _objectSpread({}, formValues, {\n                  userId: userId\n                }));\n\n              case 3:\n                response = _context.sent;\n                // dispatching 'action' after getting the response\n                dispatch({\n                  type: CREATE_STREAM,\n                  payload: response.data\n                }); // Do some programmatic navigation to get the user back to root route \n                // i.e. once the stream gets successfully created, app will route the user back to streamList page\n\n                history.push('/');\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchStreams = function fetchStreams() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return streams.get('/streams');\n\n              case 2:\n                response = _context2.sent;\n                dispatch({\n                  type: FETCH_STREAMS,\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchStream = function fetchStream(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return streams.get(\"/streams/\".concat(id));\n\n              case 2:\n                response = _context3.sent;\n                dispatch({\n                  type: FETCH_STREAM,\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var deleteStream = function deleteStream(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return streams.delete(\"/stream/\".concat(id));\n\n              case 2:\n                dispatch({\n                  type: DELETE_STREAM,\n                  payload: id\n                });\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x5) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n  history.push('/');\n};\nexport var editStream = function editStream(id, formValues) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return streams.put(\"/stream/\".concat(id), formValues);\n\n              case 2:\n                response = _context5.sent;\n                dispatch({\n                  type: EDIT_STREAM,\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x6) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/home/aakash/Documents/Aakash/Learn/React-js/streams/client/src/actions/index.js"],"names":["streams","history","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAM","FETCH_STREAMS","DELETE_STREAM","EDIT_STREAM","signIn","userId","type","payload","signOut","createStreams","formValues","dispatch","getState","auth","post","response","data","push","fetchStreams","get","fetchStream","id","deleteStream","delete","editStream","put"],"mappings":"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","sourcesContent":["import streams from '../apis/streams';\nimport history from '../history';\n\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAM, FETCH_STREAMS, DELETE_STREAM, EDIT_STREAM } from './types';\n\nexport const signIn = (userId) => {\n    return {\n        type : SIGN_IN,\n        payload : userId\n    };\n};\n\n\n\nexport const signOut = () => {\n    return {\n        type : SIGN_OUT,\n    };\n};\n\n\nexport const createStreams = (formValues) => {\n    return async (dispatch, getState) => {\n        const { userId } = getState().auth;\n        const response = await streams.post('/streams', {...formValues, userId});\n\n        // dispatching 'action' after getting the response\n        dispatch({type : CREATE_STREAM, payload : response.data});\n\n        // Do some programmatic navigation to get the user back to root route \n        // i.e. once the stream gets successfully created, app will route the user back to streamList page\n\n        history.push('/');\n\n    };\n};\n\n\nexport const fetchStreams = () => {\n    return async (dispatch) => {\n        const response = await streams.get('/streams');\n\n        dispatch({type : FETCH_STREAMS, payload : response.data});\n    };\n};\n\n\nexport const fetchStream = (id) => {\n    return async (dispatch) => {\n        const response = await streams.get(`/streams/${id}`);\n        dispatch({type : FETCH_STREAM, payload : response.data});\n    };\n};\n\n\nexport const deleteStream = (id) => {\n    return async (dispatch) => {\n        await streams.delete(`/stream/${id}`);\n        dispatch({type : DELETE_STREAM, payload : id});\n    };\n    history.push('/');\n};\n\n\n\nexport const editStream = (id, formValues) => {\n    return async (dispatch) => {\n        const response = await streams.put(`/stream/${id}`, formValues);\n        dispatch({type : EDIT_STREAM, payload : response.data});\n    };\n};\n\n"]},"metadata":{},"sourceType":"module"}