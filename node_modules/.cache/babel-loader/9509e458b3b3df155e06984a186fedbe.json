{"ast":null,"code":"import _classCallCheck from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/src/components/Streams/StreamCreate.js\";\n// import React from 'react';\n// import {Field, reduxForm} from 'redux-form';\n// import { connect } from 'react-redux';\n// import { createStreams } from '../../actions';\n// class StreamCreate extends React.Component {\n//     renderError = ({touched, error}) => {\n//         if (touched && error){\n//             return(\n//                 <div className=\"ui error message\">\n//                     <div className=\"header\">\n//                         {error}\n//                     </div>\n//                 </div>\n//             );\n//         }\n//     }\n//     renderInput = (formProps) => {\n//         const className = `field ${formProps.meta.error && formProps.meta.touched ? 'error': ''}`;\n//         return(\n//             <div className={className}>\n//             <label>{formProps.label}</label>\n//                 <input onChange={formProps.input.onChange} value={formProps.input.value} />\n//                 {this.renderError(formProps.meta)}\n//                 {/* <div>{formProps.meta.error}</div> */}\n//             </div>\n//         );\n//     }\n//     onSubmit = (formValues) => {\n//         // e.preventDefault();              //No longer needed\n//         // formValues can be now directly used for validation, saving to any APIs, etc.\n//         // Thus its better method and avoid useless handling of 'event'. \n//         // console.log(formValues);\n//         this.props.createStreams(formValues);\n//     }\n//     render() {\n//         return(\n//             <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n//             {/* 'handleSubmit' is a callback method provided to component by the Redux-form. We then pass our callback method (onSubmit) to this function.\n//             Behind the scenes 'handleSubmit' automatically gets access to 'event' and automatically call 'e.preventDefault()'. Thus there is no need to \n//             even call onSubmit function with event (i.e. onSubmit(e)) instead its going to be called with the values which we have inside our 'Field' inputs. */}\n//             {/* Field (by default) in case of extra input like 'label' automatically pass it as a prop to renderInput function.\n//                 This makes label access by 'formProps'. */}\n//                 <Field name='Title' component={this.renderInput} label=\"Enter Title\"/>\n//                 <Field name='Description' component={this.renderInput} label=\"Enter Description\"/>\n//                 <button className=\"ui button primary\">Submit</button>\n//             </form>\n//         );\n//     }\n// }\n// const validate = (formValues) => {\n//     const errors = {};\n//     if(!formValues.Title) {\n//         errors.Title = \"Form must have a Title\";\n//     }\n//     if(!formValues.Description) {\n//         errors.Description = \"Form must have a Description\";\n//     }\n//     return errors;\n// };\n// const formWrapped = reduxForm({form : 'streamCreate', validate})(StreamCreate);\n// export default connect(null, { createStreams })(formWrapped);\n//#######################################################################################################################################################\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createStreams } from '../../actions';\nimport StreamForm from './StreamForm';\n\nvar StreamCreate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamCreate, _React$Component);\n\n  function StreamCreate() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreamCreate);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreamCreate)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onSubmit = function (formValues) {\n      _this.props.createStreams(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(StreamCreate, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Create a Stream\"), React.createElement(StreamForm, {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return StreamCreate;\n}(React.Component);\n\nexport default connect(null, {\n  createStreams: createStreams\n})(StreamCreate);","map":{"version":3,"sources":["/home/aakash/Documents/Aakash/Learn/React-js/streams/client/src/components/Streams/StreamCreate.js"],"names":["React","connect","createStreams","StreamForm","StreamCreate","onSubmit","formValues","props","Component"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AAEA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;IAGMC,Y;;;;;;;;;;;;;;;;;;UAEFC,Q,GAAW,UAACC,UAAD,EAAgB;AACvB,YAAKC,KAAL,CAAWL,aAAX,CAAyBI,UAAzB;AACH,K;;;;;;;6BAEQ;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ,EAEI,oBAAC,UAAD;AAAY,QAAA,QAAQ,EAAE,KAAKD,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ;AAMH;;;;EAbsBL,KAAK,CAACQ,S;;AAiBjC,eAAeP,OAAO,CAAC,IAAD,EAAO;AAAEC,EAAAA,aAAa,EAAbA;AAAF,CAAP,CAAP,CAAiCE,YAAjC,CAAf","sourcesContent":["// import React from 'react';\n// import {Field, reduxForm} from 'redux-form';\n// import { connect } from 'react-redux';\n// import { createStreams } from '../../actions';\n\n\n// class StreamCreate extends React.Component {\n\n//     renderError = ({touched, error}) => {\n//         if (touched && error){\n//             return(\n//                 <div className=\"ui error message\">\n//                     <div className=\"header\">\n//                         {error}\n//                     </div>\n//                 </div>\n//             );\n//         }\n//     }\n\n\n//     renderInput = (formProps) => {\n//         const className = `field ${formProps.meta.error && formProps.meta.touched ? 'error': ''}`;\n//         return(\n//             <div className={className}>\n//             <label>{formProps.label}</label>\n//                 <input onChange={formProps.input.onChange} value={formProps.input.value} />\n//                 {this.renderError(formProps.meta)}\n//                 {/* <div>{formProps.meta.error}</div> */}\n//             </div>\n//         );\n//     }\n\n//     onSubmit = (formValues) => {\n//         // e.preventDefault();              //No longer needed\n\n//         // formValues can be now directly used for validation, saving to any APIs, etc.\n//         // Thus its better method and avoid useless handling of 'event'. \n\n//         // console.log(formValues);\n\n//         this.props.createStreams(formValues);\n\n\n//     }\n\n//     render() {\n//         return(\n//             <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n\n//             {/* 'handleSubmit' is a callback method provided to component by the Redux-form. We then pass our callback method (onSubmit) to this function.\n//             Behind the scenes 'handleSubmit' automatically gets access to 'event' and automatically call 'e.preventDefault()'. Thus there is no need to \n//             even call onSubmit function with event (i.e. onSubmit(e)) instead its going to be called with the values which we have inside our 'Field' inputs. */}\n\n//             {/* Field (by default) in case of extra input like 'label' automatically pass it as a prop to renderInput function.\n//                 This makes label access by 'formProps'. */}\n\n//                 <Field name='Title' component={this.renderInput} label=\"Enter Title\"/>\n//                 <Field name='Description' component={this.renderInput} label=\"Enter Description\"/>\n\n//                 <button className=\"ui button primary\">Submit</button>\n//             </form>\n//         );\n//     }\n// }\n\n\n// const validate = (formValues) => {\n//     const errors = {};\n\n//     if(!formValues.Title) {\n//         errors.Title = \"Form must have a Title\";\n//     }\n\n//     if(!formValues.Description) {\n//         errors.Description = \"Form must have a Description\";\n//     }\n\n//     return errors;\n// };\n\n\n// const formWrapped = reduxForm({form : 'streamCreate', validate})(StreamCreate);\n\n// export default connect(null, { createStreams })(formWrapped);\n\n//#######################################################################################################################################################\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createStreams } from '../../actions';\nimport StreamForm from './StreamForm';\n\n\nclass StreamCreate extends React.Component {\n\n    onSubmit = (formValues) => {\n        this.props.createStreams(formValues);\n    }\n\n    render() {\n        return(\n            <div>\n                <h3>Create a Stream</h3>\n                <StreamForm onSubmit={this.onSubmit} />\n            </div>\n        );\n    }\n}\n\n\nexport default connect(null, { createStreams })(StreamCreate);\n \n\n"]},"metadata":{},"sourceType":"module"}