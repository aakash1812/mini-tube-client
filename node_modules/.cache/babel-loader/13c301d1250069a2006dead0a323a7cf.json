{"ast":null,"code":"import _classCallCheck from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/aakash/Documents/Aakash/Learn/React-js/streams/client/src/components/Streams/StreamEdit.js\";\n// import React from 'react';\n// import { connect } from 'react-redux';\n// import { fetchStream } from '../../actions';\n// //  'props' object can only be accessed inside StreamEdit function\n// // const StreamEdit = (props) => {\n// //     console.log(props);\n// //     console.log(props.match.params.id);\n// //     return(\n// //         <div>StreamEdit</div>\n// //     );\n// // };\n// class StreamEdit extends React.Component {\n//     componentDidMount() {\n//         this.props.fetchStream(this.props.match.params.id);\n//     }\n//     render() {\n//         if (!this.props.stream){\n//             return(\n//                 <div></div>\n//             );\n//         } \n//         return(\n//             <div>{this.props.stream.Title}</div>\n//         );\n//     }\n// }\n// // 'state' object can only be access inside mapStateTo Props function.\n// // But we need to match 'id' inside props to 'state', so as to get desired information.\n// // Thus another argument of mapStateTOProps i.e. ownProps is a reference of 'props' object inside StreamEdit function\n// const mapStateToProps = (state, ownProps) => {\n//     return(\n//         { stream : state.streams[ownProps.match.params.id] }\n//     ); \n// };\n// export default connect(mapStateToProps, {fetchStream})(StreamEdit);\n// ###################################################################################################################################################\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\nimport { Field, reduxForm } from 'redux-form'; //  'props' object can only be accessed inside StreamEdit function\n// const StreamEdit = (props) => {\n//     console.log(props);\n//     console.log(props.match.params.id);\n//     return(\n//         <div>StreamEdit</div>\n//     );\n// };\n\nvar StreamEdit =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamEdit, _React$Component);\n\n  function StreamEdit() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreamEdit);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreamEdit)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onSubmit = function () {\n      return null;\n    };\n\n    return _this;\n  }\n\n  _createClass(StreamEdit, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchStream(this.props.match.params.id);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.props.stream) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"form\", {\n        onSubmit: this.props.onSubmit,\n        className: \"ui form error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"Title\",\n        label: \"Enter Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"Description\",\n        label: \"Enter Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Submit\")) // <div>{this.props.stream.Title}</div>\n      ;\n    }\n  }]);\n\n  return StreamEdit;\n}(React.Component); // 'state' object can only be access inside mapStateTo Props function.\n// But we need to match 'id' inside props to 'state', so as to get desired information.\n// Thus another argument of mapStateTOProps i.e. ownProps is a reference of 'props' object inside StreamEdit function\n\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream: fetchStream\n})(StreamEdit);","map":{"version":3,"sources":["/home/aakash/Documents/Aakash/Learn/React-js/streams/client/src/components/Streams/StreamEdit.js"],"names":["React","connect","fetchStream","Field","reduxForm","StreamEdit","onSubmit","props","match","params","id","stream","Component","mapStateToProps","state","ownProps","streams"],"mappings":";;;;;;AAAA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAMA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAAQC,KAAR,EAAeC,SAAf,QAA+B,YAA/B,C,CAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEMC,U;;;;;;;;;;;;;;;;;;UAMFC,Q,GAAW,YAAM;AACb,aAAO,IAAP;AACH,K;;;;;;;wCANmB;AAChB,WAAKC,KAAL,CAAWL,WAAX,CAAuB,KAAKK,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C;AACH;;;6BAMQ;AACL,UAAI,CAAC,KAAKH,KAAL,CAAWI,MAAhB,EAAuB;AACnB,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;AACD,aAEI;AAAM,QAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWD,QAA3B;AAAqC,QAAA,SAAS,EAAC,eAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,KAAK,EAAC,aAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,KAAK,EAAC,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,EAKI;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ,CAFJ,CAWI;AAXJ;AAcH;;;;EA9BoBN,KAAK,CAACY,S,GAsC/B;AAEA;AAEA;;;AAGA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AACzC,SACI;AAAEJ,IAAAA,MAAM,EAAGG,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACP,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAX,GADJ;AAGH,CAJD;;AAMA,eAAeT,OAAO,CAACY,eAAD,EAAkB;AAACX,EAAAA,WAAW,EAAXA;AAAD,CAAlB,CAAP,CAAwCG,UAAxC,CAAf","sourcesContent":["// import React from 'react';\n// import { connect } from 'react-redux';\n// import { fetchStream } from '../../actions';\n\n\n// //  'props' object can only be accessed inside StreamEdit function\n\n\n// // const StreamEdit = (props) => {\n// //     console.log(props);\n// //     console.log(props.match.params.id);\n// //     return(\n// //         <div>StreamEdit</div>\n// //     );\n// // };\n\n// class StreamEdit extends React.Component {\n\n//     componentDidMount() {\n//         this.props.fetchStream(this.props.match.params.id);\n//     }\n\n//     render() {\n//         if (!this.props.stream){\n//             return(\n//                 <div></div>\n//             );\n//         } \n//         return(\n//             <div>{this.props.stream.Title}</div>\n//         );\n        \n//     }\n\n// }\n\n\n\n\n\n// // 'state' object can only be access inside mapStateTo Props function.\n\n// // But we need to match 'id' inside props to 'state', so as to get desired information.\n\n// // Thus another argument of mapStateTOProps i.e. ownProps is a reference of 'props' object inside StreamEdit function\n\n\n// const mapStateToProps = (state, ownProps) => {\n//     return(\n//         { stream : state.streams[ownProps.match.params.id] }\n//     ); \n// };\n\n// export default connect(mapStateToProps, {fetchStream})(StreamEdit);\n\n// ###################################################################################################################################################\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\nimport {Field, reduxForm} from 'redux-form';\n\n\n//  'props' object can only be accessed inside StreamEdit function\n\n\n// const StreamEdit = (props) => {\n//     console.log(props);\n//     console.log(props.match.params.id);\n//     return(\n//         <div>StreamEdit</div>\n//     );\n// };\n\nclass StreamEdit extends React.Component {\n\n    componentDidMount() {\n        this.props.fetchStream(this.props.match.params.id);\n    }\n\n    onSubmit = () => {\n        return null;\n    }\n\n    render() {\n        if (!this.props.stream){\n            return(\n                <div></div>\n            );\n        } \n        return(\n\n            <form onSubmit={this.props.onSubmit} className=\"ui form error\">\n\n                <Field name='Title' label=\"Enter Title\"/>\n                <Field name='Description' label=\"Enter Description\"/>\n\n                <button className=\"ui button primary\">Submit</button>\n            </form>\n\n\n            // <div>{this.props.stream.Title}</div>\n        );\n        \n    }\n\n}\n\n\n\n\n\n// 'state' object can only be access inside mapStateTo Props function.\n\n// But we need to match 'id' inside props to 'state', so as to get desired information.\n\n// Thus another argument of mapStateTOProps i.e. ownProps is a reference of 'props' object inside StreamEdit function\n\n\nconst mapStateToProps = (state, ownProps) => {\n    return(\n        { stream : state.streams[ownProps.match.params.id] }\n    ); \n};\n\nexport default connect(mapStateToProps, {fetchStream})(StreamEdit);"]},"metadata":{},"sourceType":"module"}